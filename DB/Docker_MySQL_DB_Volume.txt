Gets the latest image of a MySQL container from DockerHub:
$ docker pull mysql/mysql-server:latest

To see images:
$ docker images

To create the volume container:
$ docker create -v /var/lib/mysql --name mysqldata mysql/mysql-server:latest
syntax: $ docker create -v <path//to/volume> --name <NameOfImage> <image>

To see created contianers:
$ docker ps -a

To run the docker mysql contianer:
$ docker run -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=root --volumes-from mysqldata --name=mysqldb mysql/mysql-server:latest
syntax: $ docker run -p <port number:port number> -d -e MYSQL_ROOT_PASSWORD=<setRootPassword> --volumes-from <nameOfVolume> --name=<setNameForContainer> <repoName>:<tagName>

To login into the container DB:
$ docker exec -it mysqldb bash
syntax: $ docker exec -it <contianerName> bash
Now you are in the container, login:
$ mysql -u root -p
*provide the set password*
Remember to exit the MySQL DB with:
$ EXIT
and to exit the container:
$ exit

You can delete the 'mysqldb' container without effecting the 'mysqldata'. To test this create a new container:
$ docker run -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=root --volumes-from mysqldata --name=mysqldb1 mysql/mysql-server:latest

now login to the DB:
$ docker exec -it mysqldb1 bash
$ mysql -u root -p
*provide the set password*

---
To connect from the local machine, you have to change the connection restriction:
$ update mysql.user set host = ‘%’ where user=’root’;

